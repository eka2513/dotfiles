snippet	ife
prev_word   '^'
	if (${1:true}) {
		${2}
	} else {

	}
snippet	fun
options	word
	function ${1:function_name} (${2:argument}) {
		${3:}
	}
snippet	met
	${1:method_name}: function(${2:attribute}){
	  ${3}
	}${4:, }
snippet	setTimeout
	setTimeout(function() {
		${2}
	}, ${1:10});
snippet	proto
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${4:}
	};
snippet	anon
	function(${1}) { ${2} };
snippet	log
prev_word   '^'
	console.log(${1});
snippet	if
prev_word   '^'
	if (${1:true}) {
		${2}
	}
snippet	for
prev_word   '^'
	for (var ${1:} = 0; $1 < ${2:}; $1++) {
		${3:}
	};
#snippet	 ce
#abbr	createElement
#	var ${2:$1} = document.createElement("${1:}");
snippet	$
options	word
	$("${1:}")${2:}
snippet	click
prev_word   '^'
	$("${1:}").click(function() {
		${2:}
	});
snippet	click_confirm
prev_word   '^'
	$("${1:}").click(function() {
		if (!window.confirm("${2:messages}")) return false;

		${3:}
	});
snippet	keypress
prev_word   '^'
	$("${1:}").keypress(function() {
		${2:}
	});
snippet	keypress_enter
prev_word   '^'
	$("${1:}").keypress(function(evt) {
		if (!(evt.which && evt.which === 13) || (evt.keyCode && evt.keyCode === 13)) return false;

		${2:}
	});
snippet	confirm
prev_word   '^'
	if (!window.confirm("${1:messages}")) return false;
snippet	 localstorage
prev_word   '^'
	var ${1:}Dao = [
		read:function() {
			var list = [];
			if ( localStorage["$1"] ) {
				list = eval( localStorage["$1"] );
			}
			return list
		},
		write:function ( list ) {
			localStorage["$1"] = JSON.stringify(list);
		}
	]
snippet	$.each
options	word
	.each(function( k, v ) {
		if (!$(this).hasOwnProperty(k)) return;

		${1:}
	});
snippet	ce
prev_word   '^'
	var ${1:div} = $("<${2:} />");
snippet	var
alias	v
prev_word   '^'
	var ${1:x} = ${2:};${3:}
snippet	addClass
	${1:obj}.addClass('${2:class name}')${3}
snippet	ajax
	$.ajax({
		url: "${1:mydomain.com/url}",
		type: "${2:GET}",
		dataType: "${3:xml/html/script/json}",
		data: $.param( $("${4:Element or Expression}") ),
		complete: function() {
			${5:#://called when complete}
		},
		success: function( data, status ) {
			${6:#://called when successful}
		},
		error: function() {
			${7:#://called when there is an error}
		},
	});
snippet	hide
	${1:obj}.hide('${2:slow/400/fast}')${3}
snippet	rm
	${1:obj}.remove()${2}
snippet	ready
	$(document).ready(function() {
		${1:}
	});
snippet	text
	${1:obj}.text(${2:'some text'})${3}
snippet	html
	${1:obj}.html('${2:Some text <b>and bold!</b>}')${3}
snippet	 rep
options	word
	replace(/${1:src}/mgi, "${2:dest}")${3:}
snippet	.mouseover
options	word
	.mouseover(function() {
		${1:}
	});
snippet	.mouseout
options	word
	.mouseout(function() {
		${1:}
	});
snippet	hover
prev_word   '^'
	$("${1:}").hover(
			function() {
				${2:}
			},
			function() {

			});
snippet	.focus
options	word
	.focus(function() {
		${1:}
	});
snippet	.blur
options	word
	.blur(function() {
		${1:}
	});
snippet	.click
options	word
	.on("click", function(e) {
		${1:}
	});
snippet	.change
options	word
	.change(function() {
		${1:}
	});
snippet     alert
alias       al
options     word
	alert(${1:});${2:}
snippet     :
options     word
	"${1:key}":${2:value},${3:}
snippet     each
alias		ea
options     head
prev_word   '^'
	$.each(${1:list}, function( k, v ) {
		if (!$1.hasOwnProperty(k)) return;
		${2:}
	});
snippet     setInterval
alias       setinterval
options     head
prev_word   '^'
	setInterval(function() {
		${2:}
	}, ${1:milli_seconds});
snippet		gm_latlng
alias		gmlatlng
options		word
	new google.maps.LatLng(${1:}, ${2:});${3:}
snippet		gm_map
alias		gmmap
options		word
	new google.maps.Map(${1:}, ${2:});${3:}
snippet		gm_circle
alias		gmcircle
options		word
	new google.maps.Circle({
		map:${1:map},
		center:${2:latlng},
		radius:${3:200},
		strokeColor:'${4:}',
		strokeOpacity:${5:0.8},
		strokeWeight:${6:2}
	})
snippet		parseJSON
alias		parrsejson
options		word
	$.parseJSON(${1:})${2:}
snippet		jQuery.fn.extend
alias		fn extend
options		head
prev_word	'^'
	jQuery.fn.extend({
		${1:func_name}: function() {
			return this.${2:}
		}
	 });
snippet		canvas
options		head
prev_word	'^'
	$(document).ready(function(){
		var canvas = document.getElementById('${1:canvas_id}');

		if ( ! canvas || ! canvas.getContext ) return;

		var WIDTH = 100;
		var HEIGHT = 100;

		/* 2Dコンテキスト */
		var context = canvas.getContext('2d');

		/* 四角を描く */
		context.beginPath();
		context.moveTo(WIDTH/2, 0);
		context.lineTo(WIDTH, HEIGHT/2);
		context.lineTo(WIDTH/2, HEIGHT);
		context.lineTo(0, HEIGHT/2);
		context.closePath();
		context.stroke();
	});
snippet		center
options		word
	function center(target) {
		var zoom = Math.floor(document.body.clientWidth / window.innerWidth * 100)/100;
		var mgTop = Math.floor($(window).height()/2) + $(document).scrollTop() * zoom
					- Math.floor($(target).outerHeight(true)/2);

		$(target).css({
			"position":"fixed",
			"top":mgTop+"px"
		});
		return target;
	}
snippet		qunit_ok
alias		ok qunitok
options		head
prev_word	'^'
	ok(${1:cond}, "${2:explanation}");
snippet		qunit_test
alias		test qunittest
options		head
prev_word	'^'
	test("${1:explanation}", function() {
		${2:}
	});
snippet		qunit_deepEqual
alias		deepequal qunitdeepequal
options		head
prev_word	'^'
	deepEqual(${1:}, ${2:});
snippet		attr
options		word
	attr("${1:}", ${2:})
snippet		.attr
options		word
	.attr("${1:}", ${2:})
snippet		css
options		word
	css({
		${1:}
	})
snippet		sb_assert_text
alias		asserttext
options		head
prev_word	'^'
	{
		"type": "assertText",
		"locator": {
		"type": "css selector",
		"value": "${1:selector:}"
		},
		"text": "${2:text}"
	},${3:}
snippet		getElementsByTagName
alias		getelementsbytagname
options		word
	document.getElementsByTagName('${1:name}')${2:}
snippet		_.each
options		word
	_.each(${1:list}, function(${2:it}) {
		${3:}
	});
snippet		_.map
options		word
	_.map(${1:list}, function(${2:it}) {
		${3:}
	});
snippet		.map
options		word
	.map(function(${1:it}) {
		return ${2:};
	})${3:}
snippet		.join
options		word
	.join(${1:})
snippet		_.filter
options		word
	_.filter(${1:list}, function(${2:it}) {
		${3:}
	});
snippet		_.groupBy
options		word
	_.groupBy(${1:list}, function(${2:it}) {
		${3:}
	});
snippet		_.union
options		word
	_.union(${1:list}, function(${2:it}) {
		${3:}
	});
snippet		_.intersection
options		word
	_.intersection(${1:list}, function(${2:it}) {
		${3:}
	});
snippet		_.difference
options		word
	_.difference(${1:list}, function(${2:it}) {
		${3:}
	});
snippet		_.uniq
options		word
	_.uniq(${1:list}, function(${2:it}) {
		${3:}
	});
snippet		_.find
options		word
	_.find(${1:list}, function(${2:it}) {
		${3:}
	});
#sortBy
#counyBy
#keys
#values
#invert
#has
#isNull
#isEmpty
#inNull
#suffle
#range
#random
#escape
#times
#chain-value
snippet		.open
options		word
	.open(
		${1:url},
		'${2:window_name}',
		'width=${3:500}, height=${4:500}, menubar=${5:no}, toolbar=${6:no}, location=${7:no}, status=${8:yes}, resizable=${9:yes}, scrollbars=${10:yes}'
		/* + ', left=, top=' */
	)
snippet		livereload
options		head
prev_word	'^'
	$(document).ready(function() {
		document.write(
			'<script src="http://' + 
			(location.host || 'localhost').split(':')[0] + 
			':35729/livereload.js?snipver=1"></' + 
			'script>'
		)
	});
snippet		composer
options		head
prev_word	'^'
	{
		"require": {
			"monolog/monolog": "*",
			"devster/ubench": "*"
		}
		,"require-dev": {
			"phpunit/phpunit": "4.1.*"
		}
		,"autoload": {
			"psr-4": {
				"": "src/"
			}
		}
	}
snippet		animate
options		word
	animate( { opacity: '${1:toggle/show/hide/0.5}',}, { duration: 3000, easing: 'swing', } )
snippet		init
options		head
prev_word	'^'
	(function() {
		${1:}
	});
snippet		maps_maerker
alias		mapsmaerker marker
options		word
	new google.maps.Marker({
		"animation":google.maps.Animation.DROP,
		"draggable":true,
		"icon":google.maps.SymbolPath.CIRCLE,
		"map":map,
		"optimized":true,
		"position":new google.maps.LatLng(${1:lat}, ${2:lng}),
		"raiseOnDrag":true
	})
snippet		match
alias		regexp
options		word

	// ただのmatchメソッド利用サンプル
	if (matches = url.match(/(.+?)#(.+)/)) {
		url=matches[1];
		hash=matches[2];
	}
snippet		#
options		word
	$("#${1:}")${2:}

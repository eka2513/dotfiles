include java.snip

snippet	poi
options word
prev_word   '^'
	def file = new File("${1:test.xls}")

	file.withOutputStream{
		def book = new HSSFWorkbook()

		def sheet = book.createSheet()

		def myVal = 'a'..'z'
		for(i in 0..<myVal.size()) {
			def row = sheet.createRow(i)
			for(j in 0..<myVal[i].size()) {
				//新規セル作成
				HSSFCell cell = row.createCell((short)j)
				cell.with{
					encoding = HSSFCell.ENCODING_UTF_16
					setCellValue(myVal[i][j])
				}
			}
		}

		book.write it
	}
snippet	im
options word
prev_word   '^'
	import ${1:class}
snippet	im_common
options word
prev_word   '^'
	import ca.odell.glazedlists.*
	import ca.odell.glazedlists.gui.*
	import ca.odell.glazedlists.swing.*
	import griffon.builder.css.CSSDecorator  
	import groovy.util.logging.Slf4j
	import java.awt.*
	import javax.swing.*
	import org.hibernate.cfg.*
	import static javax.swing.JOptionPane.ERROR_MESSAGE
	import static javax.swing.JOptionPane.OK_OPTION
	import static javax.swing.JOptionPane.QUESTION_MESSAGE
	import static javax.swing.JOptionPane.WARNING_MESSAGE
	import static javax.swing.JOptionPane.YES_NO_OPTION
	import static javax.swing.JOptionPane.YES_OPTION
	import static javax.swing.JOptionPane.showMessageDialog
	import static javax.swing.JOptionPane.showOptionDialog
snippet	message
options word
	showMessageDialog(
		app.windowManager.windows[0],
		"${1:message}"
	)
snippet	prop
options word
	System.properties["${1:user.home}"]${2}
snippet	confirm
options word
	if( showOptionDialog(
			app.windowManager.windows[0],
			"${1:message}",
			"確認", YES_NO_OPTION, QUESTION_MESSAGE, null,
			[ "はい", "いいえ" ] as String[], "いいえ",
		) != YES_OPTION ) {
		${2:return}
	}
	${3:}
snippet	camel
options word
	${1:var}.split("_").collect{
		org.apache.commons.lang.WordUtils.capitalize(it)
	}.join("")
	${2:}
snippet	const
options word
	public static final ${1:NAME} = ${2:var}
snippet	co
options word
	collect {
		${1:logic}
	}${2:}
snippet	time
options word
	use ( groovy.time.TimeCategory ) {
		${1}
	}
snippet	de
options word
	default:
		${1}
		break
snippet	sbang
options word

snippet	warning
options word
	showOptionDialog(
		app.windowManager.windows[0],
		"${2:message}",
		"注意", OK_OPTION, WARNING_MESSAGE, null,
		[ "閉じる" ] as String[], "閉じる"
	)
	${3}
snippet	tc
options word
	public class ${1:`Filename()`} extends ${2:TestCase}
snippet	savebutton
options word
	button(
		text:"保存",
		actionPerformed:controller.${1:action},
		enabled:bind{ model.editing },
		constraints:"${2:}",
		icon:silkIcon( "disk" ),
	)
	${3:}
snippet	button
options word
	button(
		text:"${1:text}",
		actionPerformed:controller.${2:action},
		enabled:bind{ model.editing },
		constraints:"${3}",
	)
	${4}
snippet	act_tran
options word
	def ${1:action} = { evt = null ->
		log.info "$1 - start."

		def tx = factory.currentSession.beginTransaction()
		try {
			${2}

			doOutside {

				doLater {

				}
			}
		} catch ( e ) {
			tx?.rollback()
			log.error "$1 - exception.", e
		} finally {
			if ( tx?.hasTransaction() )
				tx.commit()
			log.info "$1 - end."
		}
	}

snippet	act
	def ${1:action} = { evt = null ->
		log.info "$1 - start."

		try {
			def params = model.properties.clone()

			doOutside {
				${2}

				doLater {

				}
			}
		} catch ( e ) {
			log.error "$1 - exception.", e
		} finally {
			log.info "$1 - end."
		}
	}

snippet	act_monitor
	def ${1:action} = { evt = null ->
		log.info "$1 - start."

		def progressMonitor = new ProgressMonitor(
			app.windowManager.windows[0], "処理を実行中です。しばらくお待ちください。", "", 0, 100
		)

		try {
			def params = model.properties.clone()

			doOutside {
				${2}

				if (progressMonitor.isCanceled()) {
					doLater {
						showMessageDialog(
							app.windowManager.windows[0],
							"処理が中断されました。"
						)
					}
					return
				}

				progressMonitor.progress = Math.round(rowIndex * 100 / rows.size())

				doLater {
					if (!progressMonitor.isCanceled())
						showMessageDialog(
							app.windowManager.windows[0],
							"処理が完了しました。"
						)

				}
			}
		} catch ( e ) {
			log.error "$1 - exception.", e
		} finally {
			progressMonitor?.close()
			log.info "$1 - end."
		}
	}

snippet	label
	label(
		text:"${1:text}",
		constraints:"${2:wrap}",
	)

snippet	pr
	println ${1:message}
snippet	$
options word
	${${1:}}${2:}
snippet	now
options word
	def now = Calendar.instance
snippet	el
options word
	else {
		${1:}
	}
snippet	as
	assertEquals ${1:} ${2:}
snippet	logd
options word
	log.debug "${1:message}"
snippet	fil
options head
prev_word   '^'
	def ${1:file} = new File("${2:path}")${3}
snippet	m
	${1:void} ${2:method}(${3}) {
		log.info "$2 - start."
		try {
			${4:}
		} catch ( e ) {
			log.error "$2 - exception.", e
		} finally {
			log.info "$2 - end."
		}
	}

snippet	body
	layout:migLayout(
		layoutConstraints:"fill",
		columnConstraints:"[grow]",
	)

	menuBar(
		constraints:"north",
	) {
		// TODO add menu
	}

	scrollPane(
		constraints:"center, grow",
	) {
		panel() {
			${1}
		}
	}

	textField(
		constraints:"south",
		text:bind( source:model, sourceProperty:"statusbarText", mutual:true ),
		enabled:false,
		disabledTextColor:Color.RED,
	)
snippet	fi
prev_word	'^'
options word
	find {
		${1}
	}
snippet	br
	break;
snippet	wh
	while (${1}) ${2}
snippet	ca
	catch(${1:Exception} ${2:e}) ${3}
snippet	ab
	abstract
snippet	logi
	log.info "${1:message}"
snippet	interface
	interface ${1:`Filename("", "untitled")`} ${2:extends Parent}${3}
snippet	def
	def ${1:var} = ${2:constructor}
	${3}
snippet	final
	final def ${1:var} = ${2:constructor}
	${3}
snippet	ymd
	format( "${1:yyyy/MM/dd}" )
snippet	error
	showOptionDialog(
		app.windowManager.windows[0],
		"${1:message}",
		"エラー", OK_OPTION, ERROR_MESSAGE, null,
		[ "閉じる" ] as String[], "閉じる"
	)
	${2}
snippet	cl
	@GrabConfig(systemClassLoader=true)
	import groovy.transform.AutoClone
	import groovy.transform.Canonical
	import groovy.util.logging.Log4j

	@AutoClone
	@Canonical
	@Log4j
	class ${1:`Filename("", "untitled")`} {
		${2}
	}
snippet	bind
	text:bind( source:model, sourceProperty:"${1:property}"${2:, mutual:true} ),
	${3}
snippet	if
prev_word   '^'
	if (${1}) {
		${2:}
	}
snippet	sw
prev_word   '^'
	switch (${1}) {
		case ${2:x}:
			${3}
			break
		default:
			break
	}
snippet	elif
	else if (${1}) {
		${2}
	}
snippet	gr
prev_word	'^'
options word
	groupBy {
		${1}
	}
snippet	tm
prev_word   '^'
	@Test
	void test${1:Name}() {
		${4}

		assertEquals ${2:} ${3:}
	}

snippet	textfield
alias   textf
options word
prev_word '^'
	textField(
		id:"$1",
		text:bind( source:model, sourceProperty:"${1:property}", mutual:true ),
		columns:${2:3},
		constraints:"growx",
		dragEnabled:true,
		enabled:bind{ model.editing },
	)
	${3}
snippet	cs
prev_word   '^'
	case ${1}:
		${2}
		break
snippet	fia
options word
	findAll {
		${1:logic}
	}.${2:method}
snippet	ea
options word
prev_word   '^'
	each{
		${1}
	}
snippet	jo
options word
prev_word   '^'
	join("${1:\n}")

snippet	rep
options word
prev_word   '^'
	replaceAll(/${1}/, "${2}")
snippet	builder_swing
prev_word   '^'
	import groovy.swing.*

	def swing = new groovy.swing.SwingBuilder()
	def frame = swing.frame(
		title:'${1:title}',
		defaultCloseOperation:javax.swing.JFrame.EXIT_ON_CLOSE,
		show:true,
		pack:true,
		id:"${2:mainFrame}"
	) {
		panel{
			vbox{
				${3}
			}
		}
	}
snippet	builder_ant
prev_word   '^'
	def ant = new AntBuilder()

	ant.${1:}
snippet	builder_cli
prev_word   '^'
	def cli = new CliBuilder(usage:"${this.class.name} [-${1:e} ${2:encoding}] arg")
	cli.$1 longOpt:"$2", args:1, "$2.", required:false

	def opt = cli.parse args
	def params = opt.arguments()
	if (params.size() != ${4:1} || !opt){
		cli.usage()
		System.exit 1
	}

	${3:println params}
snippet	sql_jstels
prev_word   '^'
	import groovy.sql.Sql

	def sql = Sql.newInstance(
		"jdbc:jstels:xml:${1:filepath}"
		,"${2:user}"
		,"${3:password}"
		,"jstels.jdbc.xml.XMLDriver2"
	)

	sql.eachRow(sql) {
		${4:}
	}
snippet	grab_poi
prev_word   '^'
	@Grab("org.apache.poi:poi:${1:3.8}")
	@Grab("org.apache.poi:poi-ooxml:$1")
	@Grab("org.apache.poi:poi-scratchpad:$1")
	import org.apache.poi.hssf.usermodel.*
	${2:}
snippet	 grab_resolver
alias	   grabr
prev_word   '^'
	@GrabResolver(name='${1:name}', root='${2:}')
snippet	grab_opencsv
prev_word   '^'
	@Grab("net.sf.opencsv:opencsv:${1:2.1}")
	import au.com.bytecode.opencsv.*
	${2:}

	// file.withReader{
	//	 def lines = oldCsvFile.withReader{
	//		 new CSVReader(it).readAll()
	//	 }
	// }

	// file.withWriter{
	//	 def lines = []
	//	 oldCsvFile.withWriter{
	//		 new CSVWriter(it).writeAll(lines)
	//	 }
	// }
snippet	slurper_xml
alias xmlslurper
prev_word   '^'
	import groovy.xml.StreamingMarkupBuilder

	def file = new File( "${1:filename}" )
	def parsedText = file.text
	def ${2:root} = new XmlSlurper(false,false).parseText(parsedText)

	println groovy.xml.XmlUtil.serialize($2).toString()
snippet	slurper_json
alias jsonslurper
prev_word   '^'
	import groovy.json.JsonSlurper

	def file = new File( "${1:filename}" )
	def parsedText = file.text
	def ${2:root} = new JsonSlurper().parseText(parsedText)

	//assert $2.name == "Peter"
	//assert $2.age == 23
	//assert $2.gender == null
snippet	panel_body
prev_word   '^'
	panel(
		constraints:BorderLayout.CENTER,
	) {

		migLayout(
			layoutConstraints:"fillx",
			columnConstraints:"${1:[grow][grow]}",
		)

		${2:}


	}

snippet	 ptest
abbr		parameterized test class
	import org.junit.runner.RunWith
	import org.junit.runners.Parameterized
	import org.junit.runners.Parameterized.Parameters


	@RunWith(Parameterized.class)
	class ${1:ClassName}_${2:methodName}_Test {
		static def date = { x ->
			Date.parse("yyyy MM dd", x)
		}

		def ${3:param}

		$1_$2_Test(
			$3
		) {
			this.$3 = $3
		}

		@Parameters
		static List<Object[]> createTestData() {
			[
				[
					${4:value},
				] as Object[],
			]
		}

		@Test
		void testAny() {
			def blogic = new $1()

			def nextAnken = new BLBA002001BLogicAnkenInfoBean(
				maebaraiTsukisu:beforeMaebaraiTsukisu,
				maebaraiKeijoKingaku:beforeMaebaraiKeijoKingaku,
			)

			def result = blogic.$2(
				nextAnken,
				shiharaiNensu
			)

			assertEquals new BLBA002001BLogicAnkenInfoBean(
				maebaraiTsukisu:afterMaebaraiTsukisu,
				maebaraiKeijoKingaku:afterMaebaraiKeijoKingaku,
			).toString(), result.toString()
		}
	}


snippet	 hibernate
prev_word   '^'
	import org.hibernate.cfg.*

	def factory = null

	def config = new AnnotationConfiguration()
	config.with{
		setProperties([
			"hibernate.dialect":"org.hibernate.dialect.HSQLDialect",
			"hibernate.connection.driver_class":"org.hsqldb.jdbcDriver",
			"hibernate.connection.url":"jdbc:hsqldb:file:./${1:appname}.db",
			"hibernate.connection.username":"sa",
			"hibernate.connection.password":"",
			"hibernate.connection.pool_size":"1",
			"hibernate.connection.autocommit":"true",
			"hibernate.cache.provider_class":"org.hibernate.cache.NoCacheProvider",
			"hibernate.hbm2ddl.auto":"update",
			"hibernate.show_sql":"false",
			"hibernate.transaction.factory_class":"org.hibernate.transaction.JDBCTransactionFactory",
			"hibernate.current_session_context_class":"thread",
		] as Properties)
		addAnnotatedClass(${2:daoname})
	}

	this.factory = config.buildSessionFactory()
snippet	 dao
prev_word   '^'
	package ${1:package}

	import groovy.transform.AutoClone
	import groovy.transform.Canonical
	import javax.persistence.*

	@AutoClone
	@Canonical
	class ${2:classname} {
		@Id @GeneratedValue(strategy=GenerationType.IDENTITY)
		public Long id

		// @OneToMany(targetEntity = TwitterAccountInFollowingList.class, mappedBy = "twitterAccount")
		// public List<TwitterAccountInFollowingList> twitterAccountsInFollowingList = new ArrayList<TwitterAccountInFollowingList>()

		public Date lastUpdated = null
	}
snippet	 spock_tc
	@Grab(group='org.spockframework', module='spock-maven', version='0.7-groovy-2.0')
	import spock.lang.*

	class ${1:className}TestSpec extends Specification {
		static def date = { x ->
			Date.parse("yyyy MM dd", x)
		}

	}
snippet	 spock_tm
		@Unroll
		def "$2"() {
			setup:
				def target = new ${1:className}()

			when:
				actual == target.${2:methodName}(
					${3:params}
				)

			then:
				actual == expect

			where:
				expect | keiyakuKaishi		 | keiyakuShuryo	 
					   | date("2013 03 31")  | date("2016 03 30")
		}

snippet	grab_commons_lang
prev_word   '^'
	@Grab("commons-lang:commons-lang:2.2")
	import org.apache.commons.lang.*
	${1:}

snippet	 bindable
abbr		bindable
prev_word   '^'
	@Bindable ${1:String} ${2:variable} = ${3:null}

	${4:}
snippet	fun
prev_word   '^'
	def ${1:function_name} (${2:argument}) {
		${3:// body}
	}
snippet	 startupend
alias	   onstartupend
alias	   startup
abbr		OnStartupEnd
prev_word   '^'
		def onStartupEnd = { app ->
			log.info "onStartupEnd - start."

			model.statusbarText = "画面を表示します..."

			doOutside{
				if (!Lock.getLock()) {
					edt{
						showMessageDialog( view.mainFrame, "${model.appName}が既に起動しています。" )
					}
					System.exit(1)
				}

				def config = new AnnotationConfiguration()
				config.with{
					setProperties([
						"hibernate.dialect":"org.hibernate.dialect.HSQLDialect",
						"hibernate.connection.driver_class":"org.hsqldb.jdbcDriver",
						"hibernate.connection.url":"jdbc:hsqldb:file:./tsubuyakimaru.db",
						"hibernate.connection.username":"sa",
						"hibernate.connection.password":"",
						"hibernate.connection.pool_size":"1",
						"hibernate.cache.provider_class":"org.hibernate.cache.NoCacheProvider",
						"hibernate.hbm2ddl.auto":"update",
						"hibernate.show_sql":"false",
						"hibernate.transaction.factory_class":"org.hibernate.transaction.JDBCTransactionFactory",
						"hibernate.current_session_context_class":"thread",
					] as Properties)
					// addAnnotatedClass(AppSettings)
					// addAnnotatedClass(TwitterAccount)
					// addAnnotatedClass(TwitterAccountInBlackList)
					// addAnnotatedClass(TwitterAccountInFollowingList)
				}

				this.factory = config.buildSessionFactory()

				def session = factory.currentSession
				def tx = session.beginTransaction()
				// TODO ここに処理を記述
				tx.commit()

				doLater{
					model.with{
						statusbarText = "画面を表示しました。"
						startupEnd = true
						editing = false
					}
					model.snapshot = model.properties.clone()
				}

			}
		}

snippet	 model
prev_word   '^'
	import javax.persistence.*

	@Entity
	@Table(name = "${1:table_name}")
	class ${2:Model} {
		@Id @GeneratedValue(strategy=GenerationType.IDENTITY)
		public Long id

		// public Integer waitingSeconds = 300

		// @ManyToOne(targetEntity = TwitterAccount.class) 
		// @JoinColumn(name = "twitterAccountId") 
		// public TwitterAccount twitterAccount = null

		// @OneToMany(targetEntity = ${4:TargetModel}.class, mappedBy = "${3:model}")
		// public List<${4}> ${5:targetModels} = new ArrayList<${4}>()

	}

snippet	 sys
abbr		system
	System.${1:exit} ${2:}

snippet	comboBox
	comboBox(
		id:"$1",
		selectedIndex:bind( source:model, sourceProperty:"${2:property}", mutual:true ),
		items:${3:list}
		constraints:"growx",
	)
	${3}
snippet	 fore
options word
abbr	foreach
prev_word   '^'
	for( ${1:i}:${2:list} ) {

	}
snippet	 for
prev_word   '^'
	for( def i = 0; i < ${1:list.size()}; ${2:i++} ) {

	}
snippet	 try
prev_word   '^'
	try {

	} catch ( e ) {
		log.error "", e
		${1:}
	} finally {
		   
	}
snippet	 textarea
alias	   texta
prev_word   '^'
	textArea(
		id:"$1",
		text:bind( source:model, sourceProperty:"${1:property}", mutual:true ),
		rows:${2:5},
		columns:${3:30},
		dragEnabled:true,
		keyPressed:{ e ->
			if(e.keyCode == KeyEvent.VK_TAB) {
				if(e.modifiers > 0)
					e.source.transferFocusBackward()
				else
					e.source.transferFocus()
				e.consume()
			}
		},
		// mousePressed:{ e ->
		//	 if( SwingUtilities.isRightMouseButton(e) ) {
		//		 view.editPopup.parent = e.source
		//		 view.editPopup.show(e.source, e.x, e.y)
		//	 }
		// },
		constraints:"growx",
	)
snippet	 builder_http
alias	   httpbuilder
options	 head
prev_word   '^'
	def http = new HTTPBuilder( "http://${1:}/" )
	http.request( ${2:GET|POST}, TEXT ) {
		uri.path = "/${3:}"
		uri.query = [
			"${4:key}":${5:value},
		]
		headers.'User-Agent' = 'Mozilla/5.0'
		requestContentType = URLENC

		response.success = { resp, reader  ->
			return true
		}

		response.failure = { resp ->
			return false
		}
	}
snippet		sw_sendkeys_to_date
alias		swsendkeystodate
options		word
	${1:wd}.findElement(By.id("${2:id}")).sendKeys("${3:year}");
	$1.findElement(By.id("$2")).sendKeys(Keys.TAB);
	$1.findElement(By.id("$2")).sendKeys("${4:month}");
	$1.findElement(By.id("$2")).sendKeys("${5:date}");
